unit frmSickLeave;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, dbfunc, uKernel;

type
  TfSickLeave = class(TForm)
    Panel1: TPanel;
    cmbPedagogue: TComboBox;
    cmbAcademicYear: TComboBox;
    Label3: TLabel;
    Label1: TLabel;
    ListView1: TListView;
    dtpDateEvent: TDateTimePicker;
    DateTimePicker1: TDateTimePicker;
    bAddSickLeave: TButton;
    bSaveSickLeave: TButton;
    Button3: TButton;
    Label2: TLabel;
    Label4: TLabel;
    bDeleteSickLeave: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure bAddSickLeaveClick(Sender: TObject);
    procedure bSaveSickLeaveClick(Sender: TObject);
  private
    IDSickLeave: integer;
    AcademicYear: TResultTable;
    PedagogueSurnameNP: TResultTable;
    SickLeave: TResultTable;
    FStrPedagogue: string;
    FIDPedagogue: integer;
    FStrAcademicYear: string;
    FIDAcademicYear: integer;
    procedure SetStrPedagogue(const Value: string);
    procedure SetIDPedagogue(const Value: integer);
    procedure SetStrAcademicYear(const Value: string);
    procedure SetIDAcademicYear(const Value: integer);
    procedure ShowSickLeaveList;
  public
    property IDAcademicYear: integer read FIDAcademicYear
      write SetIDAcademicYear;
    property IDPedagogue: integer read FIDPedagogue write SetIDPedagogue;
    property StrAcademicYear: string read FStrAcademicYear
      write SetStrAcademicYear;
    property StrPedagogue: string read FStrPedagogue write SetStrPedagogue;
  end;

var
  fSickLeave: TfSickLeave;

implementation

{$R *.dfm}
{ TfSickLeave }

procedure TfSickLeave.bAddSickLeaveClick(Sender: TObject);
begin
  Kernel.ChooseComboBoxItemIndex(cmbPedagogue, PedagogueSurnameNP, true,
    'ID_OUT', IDPedagogue);
  Kernel.ChooseComboBoxItemIndex(cmbAcademicYear, AcademicYear, true, 'ID',
    IDAcademicYear);
  IDSickLeave := -1;
end;

procedure TfSickLeave.bSaveSickLeaveClick(Sender: TObject);
begin
  if (cmbPedagogue.ItemIndex = 0) or (cmbAcademicYear.ItemIndex = 0) then
  begin
    ShowMessage('Выберите педагога и учебный год!');
    Exit;
  end;
end;

procedure TfSickLeave.Button3Click(Sender: TObject);
begin
  Close;
end;

procedure TfSickLeave.FormCreate(Sender: TObject);
begin
  AcademicYear := nil;
  PedagogueSurnameNP := nil;
  SickLeave := nil;
end;

procedure TfSickLeave.FormDestroy(Sender: TObject);
begin
  if Assigned(AcademicYear) then
    FreeAndNil(AcademicYear);
  if Assigned(PedagogueSurnameNP) then
    FreeAndNil(PedagogueSurnameNP);
  if Assigned(SickLeave) then
    FreeAndNil(SickLeave);
end;

procedure TfSickLeave.FormShow(Sender: TObject);
var
  i: integer;
begin
  if not Assigned(AcademicYear) then
    AcademicYear := Kernel.GetAcademicYear;
  Kernel.FillingComboBox(cmbAcademicYear, AcademicYear, 'NAME', true);
  Kernel.ChooseComboBoxItemIndex(cmbAcademicYear, AcademicYear, true, 'ID',
    IDAcademicYear);

  if not Assigned(PedagogueSurnameNP) then
    PedagogueSurnameNP := Kernel.GetPedagogueSurnameNP;
  Kernel.FillingComboBox(cmbPedagogue, PedagogueSurnameNP, 'SurnameNP', true);
  Kernel.ChooseComboBoxItemIndex(cmbPedagogue, PedagogueSurnameNP, true,
    'ID_OUT', IDPedagogue);
end;

procedure TfSickLeave.SetIDAcademicYear(const Value: integer);
begin
  if FIDAcademicYear <> Value then
    FIDAcademicYear := Value;
end;

procedure TfSickLeave.SetIDPedagogue(const Value: integer);
begin
  if FIDPedagogue <> Value then
    FIDPedagogue := Value;
end;

procedure TfSickLeave.SetStrAcademicYear(const Value: string);
begin
  if FStrAcademicYear <> Value then
    FStrAcademicYear := Value;
end;

procedure TfSickLeave.SetStrPedagogue(const Value: string);
begin
  if FStrPedagogue <> Value then
    FStrPedagogue := Value;
end;

procedure TfSickLeave.ShowSickLeaveList;
var
  id_academic_year, id_pedagogue: integer;
begin
  if cmbPedagogue.ItemIndex = 0 then
    id_pedagogue := 0
  else
    id_pedagogue := PedagogueSurnameNP[cmbPedagogue.ItemIndex - 1]
      .ValueByName('ID');

  if cmbAcademicYear.ItemIndex = 0 then
    id_academic_year := 0
  else
    id_academic_year := AcademicYear[cmbAcademicYear.ItemIndex - 1].ValueByName('ID');

  if Assigned(Orders) then
    FreeAndNil(Orders);
  Orders := Kernel.GetOrders(in_type, academic_year, status);
  Kernel.GetLVOrders(lvOrders, Orders);
  if lvOrders.Items.Count > 0 then
    lvOrders.ItemIndex := 0
  else
    DoClearOrder;

end;

end.
