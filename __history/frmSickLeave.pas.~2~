unit frmSickLeave;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.ComCtrls, dbfunc, uKernel;

type
  TfSickLeave = class(TForm)
    Panel1: TPanel;
    cmbPedagogue: TComboBox;
    cmbAcademicYear: TComboBox;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    AcademicYear: TResultTable;
    PedagogueSurnameNP: TResultTable;
    FStrPedagogue: string;
    FIDPedagogue: integer;
    FStrAcademicYear: string;
    FIDAcademicYear: integer;
    procedure SetStrPedagogue(const Value: string);
    procedure SetIDPedagogue(const Value: integer);
    procedure SetStrAcademicYear(const Value: string);
    procedure SetIDAcademicYear(const Value: integer);
  public
    { Public declarations }
  end;

var
  fSickLeave: TfSickLeave;

implementation

{$R *.dfm}

{ TfSickLeave }

procedure TfSickLeave.FormCreate(Sender: TObject);
begin
  AcademicYear := nil;
  PedagogueSurnameNP := nil;
end;

procedure TfSickLeave.FormDestroy(Sender: TObject);
begin
  if Assigned(AcademicYear) then
    FreeAndNil(AcademicYear);
      if Assigned(PedagogueSurnameNP) then
    FreeAndNil(PedagogueSurnameNP);
end;

procedure TfSickLeave.SetIDAcademicYear(const Value: integer);
begin
  if FIDAcademicYear <> Value then
    FIDAcademicYear := Value;
end;

procedure TfSickLeave.SetIDPedagogue(const Value: integer);
begin
  if FIDPedagogue <> Value then
    FIDPedagogue := Value;
end;

procedure TfSickLeave.SetStrAcademicYear(const Value: string);
begin
  if FStrAcademicYear <> Value then
    FStrAcademicYear := Value;
end;

procedure TfSickLeave.SetStrPedagogue(const Value: string);
begin
  if FStrPedagogue <> Value then
    FStrPedagogue := Value;
end;

end.
