unit frmPedagogueClass;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.StdCtrls, dbfunc, uKernel;

type
  TfPedagogueClass = class(TForm)
    Panel2: TPanel;
    lvMainClassList: TListView;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    cmbChooseAcademicYear: TComboBox;
    cmbChooseEducationProgram: TComboBox;
    cmbChoosePedagogue: TComboBox;
    GroupBox2: TGroupBox;
    chbExpelled: TCheckBox;
    bClose: TButton;
    bClassEdit: TButton;
    procedure bCloseClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure bClassEditClick(Sender: TObject);
    procedure cmbChoosePedagogueChange(Sender: TObject);
    procedure cmbChooseEducationProgramChange(Sender: TObject);
    procedure cmbChooseAcademicYearChange(Sender: TObject);
  private
    AcademicYear: TResultTable;
    EducationProgram: TResultTable;
    PedagogueSurnameNP: TResultTable;
    ClassMembersList: TResultTable;
    procedure ShowClassMembersList;
  public
    { Public declarations }
  end;

var
  fPedagogueClass: TfPedagogueClass;

implementation

{$R *.dfm}

uses frmPedagogueClassEdit;

procedure TfPedagogueClass.bClassEditClick(Sender: TObject);
begin
  if (cmbChoosePedagogue.ItemIndex = 0) or
    (cmbChooseEducationProgram.ItemIndex = 0) or
    (cmbChooseAcademicYear.ItemIndex = 0) then
  begin
    ShowMessage
      ('Для редактирования класса выберите педагога, программу и учебный год!');
    Exit;
  end;

  fPedagogueClassEdit.IDEducationProgram := EducationProgram
    [cmbChooseEducationProgram.ItemIndex - 1].ValueByName('ID');
  fPedagogueClassEdit.IDPedagogue := PedagogueSurnameNP
    [cmbChoosePedagogue.ItemIndex - 1].ValueByName('ID_OUT');
  fPedagogueClassEdit.IDAcademicYear := AcademicYear
    [cmbChooseAcademicYear.ItemIndex - 1].ValueByName('ID');

  fPedagogueClassEdit.StrEducationProgram := cmbChooseEducationProgram.Text;
  fPedagogueClassEdit.StrPedagogue := cmbChoosePedagogue.Text;
  fPedagogueClassEdit.StrAcademicYear := cmbChooseAcademicYear.Text;

  if (not Assigned(fPedagogueClassEdit)) then
    fPedagogueClassEdit := TfPedagogueClassEdit.Create(Self);
  fPedagogueClassEdit.ShowModal;
end;

procedure TfPedagogueClass.bCloseClick(Sender: TObject);
begin
  Close;
end;

procedure TfPedagogueClass.cmbChooseAcademicYearChange(Sender: TObject);
begin
  ShowClassMembersList;
end;

procedure TfPedagogueClass.cmbChooseEducationProgramChange(Sender: TObject);
begin
  ShowClassMembersList;
end;

procedure TfPedagogueClass.cmbChoosePedagogueChange(Sender: TObject);
begin
  ShowClassMembersList;
end;

procedure TfPedagogueClass.FormCreate(Sender: TObject);
begin
  AcademicYear := nil;
  EducationProgram := nil;
  PedagogueSurnameNP := nil;
  ClassMembersList := nil;
end;

procedure TfPedagogueClass.FormDestroy(Sender: TObject);
begin
  if Assigned(AcademicYear) then
    FreeAndNil(AcademicYear);
  if Assigned(EducationProgram) then
    FreeAndNil(EducationProgram);
  if Assigned(PedagogueSurnameNP) then
    FreeAndNil(PedagogueSurnameNP);
  if Assigned(ClassMembersList) then
    FreeAndNil(ClassMembersList);
end;

procedure TfPedagogueClass.FormShow(Sender: TObject);
var
  i: integer;
begin
  if not Assigned(EducationProgram) then
    EducationProgram := Kernel.GetEducationProgram;
  with cmbChooseEducationProgram do
  begin
    Clear;
    Items.Add('Все');
    for i := 0 to EducationProgram.Count - 1 do
      Items.Add(EducationProgram[i].ValueStrByName('NAME'));
    DropDownCount := EducationProgram.Count + 1;
    cmbChooseEducationProgram.ItemIndex := 0;
  end;

  if not Assigned(AcademicYear) then
    AcademicYear := Kernel.GetAcademicYear;
  with cmbChooseAcademicYear do
  begin
    Clear;
    Items.Add('Все');
    for i := 0 to AcademicYear.Count - 1 do
      Items.Add(AcademicYear[i].ValueStrByName('NAME'));
    DropDownCount := AcademicYear.Count + 1;
    cmbChooseAcademicYear.ItemIndex := 0;
  end;

  if not Assigned(PedagogueSurnameNP) then
    PedagogueSurnameNP := Kernel.GetPedagogueSurnameNP;
  with cmbChoosePedagogue do
  begin
    Clear;
    Items.Add('Все');
    for i := 0 to PedagogueSurnameNP.Count - 1 do
      Items.Add(PedagogueSurnameNP[i].ValueStrByName('SurnameNP'));
    DropDownCount := PedagogueSurnameNP.Count + 1;
    cmbChoosePedagogue.ItemIndex := 0;
  end;
  ShowClassMembersList;
end;

procedure TfPedagogueClass.ShowClassMembersList;
var
  choose_mode, in_id_education_program, in_id_pedagogue, in_id_academic_year,
    year_birth: integer;
begin
  choose_mode := 0;

  if cmbChooseEducationProgram.ItemIndex = 0 then
    in_id_education_program := 0
  else
    in_id_education_program := EducationProgram
      [cmbChooseEducationProgram.ItemIndex - 1].ValueByName('ID');
  if cmbChoosePedagogue.ItemIndex = 0 then
    in_id_pedagogue := 0
  else
    in_id_pedagogue := PedagogueSurnameNP[cmbChoosePedagogue.ItemIndex - 1]
      .ValueByName('ID_OUT');
  if cmbChooseAcademicYear.ItemIndex = 0 then
    in_id_academic_year := 0
  else
    in_id_academic_year := AcademicYear[cmbChooseAcademicYear.ItemIndex - 1]
      .ValueByName('ID');

  year_birth := 0;

  if Assigned(ClassMembersList) then
    FreeAndNil(ClassMembersList);
//  ClassMembersList := Kernel.GetChildListForClassMember(choose_mode,
//    in_id_education_program, in_id_pedagogue, in_id_academic_year, year_birth);
//  Kernel.GetLVChildListForGroupMember(lvMainClassList, ClassMembersList);
//  if lvMainClassList.Items.Count > 0 then
//    lvMainClassList.ItemIndex := 0;
end;

end.
